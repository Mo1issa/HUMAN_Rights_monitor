{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\human_rights_monitor_vscode\\\\human_rights_monitor_vscode\\\\frontend\\\\src\\\\components\\\\common\\\\FileUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Typography, Paper, CircularProgress, List, ListItem, ListItemText, ListItemIcon, IconButton, Alert, LinearProgress } from '@mui/material';\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\nimport ImageIcon from '@mui/icons-material/Image';\nimport VideoFileIcon from '@mui/icons-material/VideoFile';\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport AudioFileIcon from '@mui/icons-material/AudioFile';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FileUploader = ({\n  onUpload,\n  maxFiles = 5,\n  acceptedFileTypes = '*/*',\n  maxFileSize = 10,\n  // in MB\n  title = 'Upload Files',\n  description = 'Drag and drop files here or click to select files',\n  uploadEndpoint = null,\n  parentId = null,\n  disabled = false\n}) => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [uploadErrors, setUploadErrors] = useState({});\n  const [dragActive, setDragActive] = useState(false);\n  const [overallError, setOverallError] = useState(null);\n  const fileInputRef = React.useRef(null);\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n  const validateFile = file => {\n    // Check file size\n    if (file.size > maxFileSize * 1024 * 1024) {\n      return `File size exceeds ${maxFileSize}MB limit`;\n    }\n\n    // Check file type if specific types are required\n    if (acceptedFileTypes !== '*/*') {\n      const fileTypes = acceptedFileTypes.split(',');\n      const fileType = file.type;\n      if (!fileTypes.some(type => {\n        // Handle wildcards like image/* or specific types like image/png\n        if (type.endsWith('/*')) {\n          const category = type.split('/')[0];\n          return fileType.startsWith(category + '/');\n        }\n        return type === fileType;\n      })) {\n        return 'File type not accepted';\n      }\n    }\n    return null;\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    if (disabled) return;\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      handleFiles(e.dataTransfer.files);\n    }\n  };\n  const handleChange = e => {\n    e.preventDefault();\n    if (disabled) return;\n    if (e.target.files && e.target.files.length > 0) {\n      handleFiles(e.target.files);\n    }\n  };\n  const handleFiles = fileList => {\n    const newFiles = Array.from(fileList);\n\n    // Check if adding these files would exceed the max files limit\n    if (files.length + newFiles.length > maxFiles) {\n      setOverallError(`You can only upload a maximum of ${maxFiles} files`);\n      return;\n    }\n\n    // Validate each file and add to the list\n    const validatedFiles = newFiles.map(file => {\n      const error = validateFile(file);\n      return {\n        file,\n        id: `${file.name}-${Date.now()}`,\n        error\n      };\n    });\n    setFiles(prev => [...prev, ...validatedFiles]);\n    setOverallError(null);\n  };\n  const handleButtonClick = () => {\n    if (disabled) return;\n    fileInputRef.current.click();\n  };\n  const handleRemoveFile = id => {\n    setFiles(prev => prev.filter(file => file.id !== id));\n    setUploadProgress(prev => {\n      const newProgress = {\n        ...prev\n      };\n      delete newProgress[id];\n      return newProgress;\n    });\n    setUploadErrors(prev => {\n      const newErrors = {\n        ...prev\n      };\n      delete newErrors[id];\n      return newErrors;\n    });\n  };\n  const handleUpload = async () => {\n    if (files.length === 0 || uploading || disabled) return;\n\n    // Check if there are any validation errors\n    const hasErrors = files.some(file => file.error);\n    if (hasErrors) {\n      setOverallError('Please fix the errors before uploading');\n      return;\n    }\n    setUploading(true);\n    setOverallError(null);\n    try {\n      // Create a new FormData instance\n      const formData = new FormData();\n\n      // Add parent ID if provided\n      if (parentId) {\n        formData.append('parent_id', parentId);\n      }\n\n      // Add all files to the form data\n      files.forEach(({\n        file\n      }) => {\n        formData.append('files', file);\n      });\n\n      // If an upload endpoint is provided, use it directly\n      if (uploadEndpoint) {\n        // Simulate upload progress for each file\n        const uploadPromises = files.map(async ({\n          id,\n          file\n        }) => {\n          // Simulate progress updates\n          for (let progress = 0; progress <= 100; progress += 10) {\n            setUploadProgress(prev => ({\n              ...prev,\n              [id]: progress\n            }));\n            await new Promise(resolve => setTimeout(resolve, 200));\n          }\n        });\n\n        // Wait for all uploads to complete\n        await Promise.all(uploadPromises);\n\n        // Call the onUpload callback with the files\n        if (onUpload) {\n          onUpload(files.map(({\n            file\n          }) => file));\n        }\n      } else if (onUpload) {\n        // If no endpoint but callback is provided, just call the callback\n        onUpload(files.map(({\n          file\n        }) => file));\n      }\n\n      // Clear files after successful upload\n      setFiles([]);\n      setUploadProgress({});\n      setUploadErrors({});\n    } catch (error) {\n      console.error('Upload error:', error);\n      setOverallError('Failed to upload files: ' + (error.message || 'Unknown error'));\n\n      // Set error for each file\n      const newErrors = {};\n      files.forEach(({\n        id\n      }) => {\n        newErrors[id] = 'Upload failed';\n      });\n      setUploadErrors(newErrors);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const getFileIcon = file => {\n    const type = file.type;\n    if (type.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(ImageIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 14\n      }, this);\n    } else if (type.startsWith('video/')) {\n      return /*#__PURE__*/_jsxDEV(VideoFileIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 14\n      }, this);\n    } else if (type === 'application/pdf') {\n      return /*#__PURE__*/_jsxDEV(PictureAsPdfIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 14\n      }, this);\n    } else if (type.startsWith('audio/')) {\n      return /*#__PURE__*/_jsxDEV(AudioFileIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(InsertDriveFileIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), overallError && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: overallError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        border: '2px dashed',\n        borderColor: dragActive ? 'primary.main' : 'grey.400',\n        borderRadius: 1,\n        p: 3,\n        textAlign: 'center',\n        bgcolor: dragActive ? 'rgba(25, 118, 210, 0.04)' : 'transparent',\n        transition: 'all 0.2s ease',\n        mb: 2,\n        cursor: disabled ? 'not-allowed' : 'pointer',\n        opacity: disabled ? 0.6 : 1\n      },\n      onDragEnter: handleDrag,\n      onDragLeave: handleDrag,\n      onDragOver: handleDrag,\n      onDrop: handleDrop,\n      onClick: handleButtonClick,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\",\n        multiple: true,\n        style: {\n          display: 'none'\n        },\n        onChange: handleChange,\n        accept: acceptedFileTypes,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AttachFileIcon, {\n        sx: {\n          fontSize: 40,\n          color: 'primary.main',\n          mb: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        gutterBottom: true,\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: [\"Max \", maxFiles, \" files, up to \", maxFileSize, \"MB each\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(List, {\n      children: files.map(({\n        file,\n        id,\n        error\n      }) => /*#__PURE__*/_jsxDEV(ListItem, {\n        secondaryAction: /*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"end\",\n          \"aria-label\": \"delete\",\n          onClick: () => handleRemoveFile(id),\n          disabled: uploading,\n          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }, this),\n        sx: {\n          bgcolor: error ? 'rgba(211, 47, 47, 0.04)' : 'transparent',\n          borderRadius: 1,\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: getFileIcon(file)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: file.name,\n          secondary: error ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"error\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 21\n          }, this) : uploadErrors[id] ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"error\",\n            children: uploadErrors[id]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              sx: {\n                mr: 1\n              },\n              children: [(file.size / (1024 * 1024)).toFixed(2), \" MB\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 23\n            }, this), uploadProgress[id] !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: uploadProgress[id],\n                sx: {\n                  flexGrow: 1,\n                  mr: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                children: [uploadProgress[id], \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true), uploadProgress[id] === 100 && /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n              color: \"success\",\n              fontSize: \"small\",\n              sx: {\n                ml: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: uploading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(FileUploadIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 67\n        }, this),\n        onClick: handleUpload,\n        disabled: files.length === 0 || uploading || files.some(file => file.error) || disabled,\n        children: uploading ? 'Uploading...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploader, \"RyFZ09VdtJQuZWBGj2hjxkZDtE8=\");\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","Box","Button","Typography","Paper","CircularProgress","List","ListItem","ListItemText","ListItemIcon","IconButton","Alert","LinearProgress","AttachFileIcon","FileUploadIcon","DeleteIcon","CheckCircleIcon","ErrorIcon","InsertDriveFileIcon","ImageIcon","VideoFileIcon","PictureAsPdfIcon","AudioFileIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","FileUploader","onUpload","maxFiles","acceptedFileTypes","maxFileSize","title","description","uploadEndpoint","parentId","disabled","_s","files","setFiles","uploading","setUploading","uploadProgress","setUploadProgress","uploadErrors","setUploadErrors","dragActive","setDragActive","overallError","setOverallError","fileInputRef","useRef","handleDrag","e","preventDefault","stopPropagation","type","validateFile","file","size","fileTypes","split","fileType","some","endsWith","category","startsWith","handleDrop","dataTransfer","length","handleFiles","handleChange","target","fileList","newFiles","Array","from","validatedFiles","map","error","id","name","Date","now","prev","handleButtonClick","current","click","handleRemoveFile","filter","newProgress","newErrors","handleUpload","hasErrors","formData","FormData","append","forEach","uploadPromises","progress","Promise","resolve","setTimeout","all","console","message","getFileIcon","fileName","_jsxFileName","lineNumber","columnNumber","sx","p","mb","children","variant","gutterBottom","severity","border","borderColor","borderRadius","textAlign","bgcolor","transition","cursor","opacity","onDragEnter","onDragLeave","onDragOver","onDrop","onClick","ref","multiple","style","display","onChange","accept","fontSize","color","secondaryAction","edge","primary","secondary","alignItems","mr","toFixed","undefined","value","flexGrow","ml","justifyContent","mt","startIcon","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/human_rights_monitor_vscode/human_rights_monitor_vscode/frontend/src/components/common/FileUploader.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  Paper, \n  CircularProgress, \n  List, \n  ListItem, \n  ListItemText, \n  ListItemIcon, \n  IconButton,\n  Alert,\n  LinearProgress\n} from '@mui/material';\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\nimport ImageIcon from '@mui/icons-material/Image';\nimport VideoFileIcon from '@mui/icons-material/VideoFile';\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport AudioFileIcon from '@mui/icons-material/AudioFile';\n\nconst FileUploader = ({ \n  onUpload, \n  maxFiles = 5, \n  acceptedFileTypes = '*/*', \n  maxFileSize = 10, // in MB\n  title = 'Upload Files',\n  description = 'Drag and drop files here or click to select files',\n  uploadEndpoint = null,\n  parentId = null,\n  disabled = false\n}) => {\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [uploadErrors, setUploadErrors] = useState({});\n  const [dragActive, setDragActive] = useState(false);\n  const [overallError, setOverallError] = useState(null);\n  \n  const fileInputRef = React.useRef(null);\n\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const validateFile = (file) => {\n    // Check file size\n    if (file.size > maxFileSize * 1024 * 1024) {\n      return `File size exceeds ${maxFileSize}MB limit`;\n    }\n    \n    // Check file type if specific types are required\n    if (acceptedFileTypes !== '*/*') {\n      const fileTypes = acceptedFileTypes.split(',');\n      const fileType = file.type;\n      \n      if (!fileTypes.some(type => {\n        // Handle wildcards like image/* or specific types like image/png\n        if (type.endsWith('/*')) {\n          const category = type.split('/')[0];\n          return fileType.startsWith(category + '/');\n        }\n        return type === fileType;\n      })) {\n        return 'File type not accepted';\n      }\n    }\n    \n    return null;\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (disabled) return;\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      handleFiles(e.dataTransfer.files);\n    }\n  };\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    \n    if (e.target.files && e.target.files.length > 0) {\n      handleFiles(e.target.files);\n    }\n  };\n\n  const handleFiles = (fileList) => {\n    const newFiles = Array.from(fileList);\n    \n    // Check if adding these files would exceed the max files limit\n    if (files.length + newFiles.length > maxFiles) {\n      setOverallError(`You can only upload a maximum of ${maxFiles} files`);\n      return;\n    }\n    \n    // Validate each file and add to the list\n    const validatedFiles = newFiles.map(file => {\n      const error = validateFile(file);\n      return {\n        file,\n        id: `${file.name}-${Date.now()}`,\n        error\n      };\n    });\n    \n    setFiles(prev => [...prev, ...validatedFiles]);\n    setOverallError(null);\n  };\n\n  const handleButtonClick = () => {\n    if (disabled) return;\n    fileInputRef.current.click();\n  };\n\n  const handleRemoveFile = (id) => {\n    setFiles(prev => prev.filter(file => file.id !== id));\n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[id];\n      return newProgress;\n    });\n    setUploadErrors(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[id];\n      return newErrors;\n    });\n  };\n\n  const handleUpload = async () => {\n    if (files.length === 0 || uploading || disabled) return;\n    \n    // Check if there are any validation errors\n    const hasErrors = files.some(file => file.error);\n    if (hasErrors) {\n      setOverallError('Please fix the errors before uploading');\n      return;\n    }\n    \n    setUploading(true);\n    setOverallError(null);\n    \n    try {\n      // Create a new FormData instance\n      const formData = new FormData();\n      \n      // Add parent ID if provided\n      if (parentId) {\n        formData.append('parent_id', parentId);\n      }\n      \n      // Add all files to the form data\n      files.forEach(({ file }) => {\n        formData.append('files', file);\n      });\n      \n      // If an upload endpoint is provided, use it directly\n      if (uploadEndpoint) {\n        // Simulate upload progress for each file\n        const uploadPromises = files.map(async ({ id, file }) => {\n          // Simulate progress updates\n          for (let progress = 0; progress <= 100; progress += 10) {\n            setUploadProgress(prev => ({\n              ...prev,\n              [id]: progress\n            }));\n            await new Promise(resolve => setTimeout(resolve, 200));\n          }\n        });\n        \n        // Wait for all uploads to complete\n        await Promise.all(uploadPromises);\n        \n        // Call the onUpload callback with the files\n        if (onUpload) {\n          onUpload(files.map(({ file }) => file));\n        }\n      } else if (onUpload) {\n        // If no endpoint but callback is provided, just call the callback\n        onUpload(files.map(({ file }) => file));\n      }\n      \n      // Clear files after successful upload\n      setFiles([]);\n      setUploadProgress({});\n      setUploadErrors({});\n    } catch (error) {\n      console.error('Upload error:', error);\n      setOverallError('Failed to upload files: ' + (error.message || 'Unknown error'));\n      \n      // Set error for each file\n      const newErrors = {};\n      files.forEach(({ id }) => {\n        newErrors[id] = 'Upload failed';\n      });\n      setUploadErrors(newErrors);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const getFileIcon = (file) => {\n    const type = file.type;\n    \n    if (type.startsWith('image/')) {\n      return <ImageIcon />;\n    } else if (type.startsWith('video/')) {\n      return <VideoFileIcon />;\n    } else if (type === 'application/pdf') {\n      return <PictureAsPdfIcon />;\n    } else if (type.startsWith('audio/')) {\n      return <AudioFileIcon />;\n    } else {\n      return <InsertDriveFileIcon />;\n    }\n  };\n\n  return (\n    <Paper \n      sx={{ \n        p: 3,\n        mb: 3\n      }}\n    >\n      <Typography variant=\"h6\" gutterBottom>\n        {title}\n      </Typography>\n      \n      {overallError && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {overallError}\n        </Alert>\n      )}\n      \n      <Box\n        sx={{\n          border: '2px dashed',\n          borderColor: dragActive ? 'primary.main' : 'grey.400',\n          borderRadius: 1,\n          p: 3,\n          textAlign: 'center',\n          bgcolor: dragActive ? 'rgba(25, 118, 210, 0.04)' : 'transparent',\n          transition: 'all 0.2s ease',\n          mb: 2,\n          cursor: disabled ? 'not-allowed' : 'pointer',\n          opacity: disabled ? 0.6 : 1\n        }}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={handleButtonClick}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          style={{ display: 'none' }}\n          onChange={handleChange}\n          accept={acceptedFileTypes}\n          disabled={disabled}\n        />\n        \n        <AttachFileIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n        \n        <Typography variant=\"body1\" gutterBottom>\n          {description}\n        </Typography>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Max {maxFiles} files, up to {maxFileSize}MB each\n        </Typography>\n      </Box>\n      \n      {files.length > 0 && (\n        <List>\n          {files.map(({ file, id, error }) => (\n            <ListItem\n              key={id}\n              secondaryAction={\n                <IconButton \n                  edge=\"end\" \n                  aria-label=\"delete\"\n                  onClick={() => handleRemoveFile(id)}\n                  disabled={uploading}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              }\n              sx={{\n                bgcolor: error ? 'rgba(211, 47, 47, 0.04)' : 'transparent',\n                borderRadius: 1,\n                mb: 1\n              }}\n            >\n              <ListItemIcon>\n                {getFileIcon(file)}\n              </ListItemIcon>\n              <ListItemText \n                primary={file.name} \n                secondary={\n                  error ? (\n                    <Typography variant=\"body2\" color=\"error\">\n                      {error}\n                    </Typography>\n                  ) : uploadErrors[id] ? (\n                    <Typography variant=\"body2\" color=\"error\">\n                      {uploadErrors[id]}\n                    </Typography>\n                  ) : (\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                        {(file.size / (1024 * 1024)).toFixed(2)} MB\n                      </Typography>\n                      {uploadProgress[id] !== undefined && (\n                        <>\n                          <LinearProgress \n                            variant=\"determinate\" \n                            value={uploadProgress[id]} \n                            sx={{ flexGrow: 1, mr: 1 }}\n                          />\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            {uploadProgress[id]}%\n                          </Typography>\n                        </>\n                      )}\n                      {uploadProgress[id] === 100 && (\n                        <CheckCircleIcon color=\"success\" fontSize=\"small\" sx={{ ml: 1 }} />\n                      )}\n                    </Box>\n                  )\n                }\n              />\n            </ListItem>\n          ))}\n        </List>\n      )}\n      \n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n        <Button\n          variant=\"contained\"\n          startIcon={uploading ? <CircularProgress size={20} /> : <FileUploadIcon />}\n          onClick={handleUpload}\n          disabled={files.length === 0 || uploading || files.some(file => file.error) || disabled}\n        >\n          {uploading ? 'Uploading...' : 'Upload'}\n        </Button>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default FileUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}